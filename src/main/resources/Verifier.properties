# Copyright (C) 2017 Alasdair Mercer, Skelp
#
# Permission is hereby granted, free of charge, to any person obtaining a copy
# of this software and associated documentation files (the "Software"), to deal
# in the Software without restriction, including without limitation the rights
# to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
# copies of the Software, and to permit persons to whom the Software is
# furnished to do so, subject to the following conditions:
#
# The above copyright notice and this permission notice shall be included in all
# copies or substantial portions of the Software.
#
# THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
# IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
# FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
# AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
# LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
# OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE
# SOFTWARE.

io.skelp.verifier.message.ResourceBundleMessageSource.default.message.negated=be invalid
io.skelp.verifier.message.ResourceBundleMessageSource.default.message.normal=be valid
io.skelp.verifier.message.ResourceBundleMessageSource.default.name=Value
io.skelp.verifier.message.ResourceBundleMessageSource.message.negated={0} must not {1}: {2}
io.skelp.verifier.message.ResourceBundleMessageSource.message.normal={0} must {1}: {2}

io.skelp.verifier.AbstractCustomVerifier.equalTo=be equal to ''{0}''
io.skelp.verifier.AbstractCustomVerifier.equalToAny=be equal to any {0}
io.skelp.verifier.AbstractCustomVerifier.hashedAs=have hash code ''{0,number,integer}''
io.skelp.verifier.AbstractCustomVerifier.instanceOf=be an instance of ''{0}''
io.skelp.verifier.AbstractCustomVerifier.instanceOfAll=be an instance of all {0}
io.skelp.verifier.AbstractCustomVerifier.instanceOfAny=be an instance of any {0}
io.skelp.verifier.AbstractCustomVerifier.nulled=be null
io.skelp.verifier.AbstractCustomVerifier.sameAs=be same as ''{0}''
io.skelp.verifier.AbstractCustomVerifier.sameAsAny=be same as any {0}

io.skelp.verifier.type.base.BaseCollectionVerifier.contain=contain ''{0}''
io.skelp.verifier.type.base.BaseCollectionVerifier.containAll=contain all {0}
io.skelp.verifier.type.base.BaseCollectionVerifier.containAny=contain any {0}
io.skelp.verifier.type.base.BaseCollectionVerifier.empty=be empty
io.skelp.verifier.type.base.BaseCollectionVerifier.sizeOf=have a size of ''{0,number,integer}''

io.skelp.verifier.type.base.BaseComparableVerifier.between=be between ''{0}'' and ''{1}'' (inclusive)
io.skelp.verifier.type.base.BaseComparableVerifier.betweenExclusive=be between ''{0}'' and ''{1}'' (exclusive)
io.skelp.verifier.type.base.BaseComparableVerifier.greaterThan=be greater than ''{0}''
io.skelp.verifier.type.base.BaseComparableVerifier.greaterThanOrEqualTo=be greater than or equal to ''{0}''
io.skelp.verifier.type.base.BaseComparableVerifier.lessThan=be less than ''{0}''
io.skelp.verifier.type.base.BaseComparableVerifier.lessThanOrEqualTo=be less than or equal to ''{0}''

io.skelp.verifier.type.base.BaseNumberVerifier.even=be even
io.skelp.verifier.type.base.BaseNumberVerifier.negative=be negative
io.skelp.verifier.type.base.BaseNumberVerifier.odd=be odd
io.skelp.verifier.type.base.BaseNumberVerifier.one=be one
io.skelp.verifier.type.base.BaseNumberVerifier.positive=be positive
io.skelp.verifier.type.base.BaseNumberVerifier.zero=be zero

io.skelp.verifier.type.base.BaseSortableCollectionVerifier.sortedBy=be sorted by ''{0}''

io.skelp.verifier.type.base.BaseTimeVerifier.sameDayAs=be same day as ''{0}''
io.skelp.verifier.type.base.BaseTimeVerifier.sameEraAs=be same era as ''{0}''
io.skelp.verifier.type.base.BaseTimeVerifier.sameHourAs=be same hour as ''{0}''
io.skelp.verifier.type.base.BaseTimeVerifier.sameMinuteAs=be same minute as ''{0}''
io.skelp.verifier.type.base.BaseTimeVerifier.sameMonthAs=be same month as ''{0}''
io.skelp.verifier.type.base.BaseTimeVerifier.sameSecondAs=be same second as ''{0}''
io.skelp.verifier.type.base.BaseTimeVerifier.sameTimeAs=be same time as ''{0}''
io.skelp.verifier.type.base.BaseTimeVerifier.sameWeekAs=be same week as ''{0}''
io.skelp.verifier.type.base.BaseTimeVerifier.sameYearAs=be same year as ''{0}''

io.skelp.verifier.type.base.BaseTruthVerifier.falsy=be falsy
io.skelp.verifier.type.base.BaseTruthVerifier.truthy=be truthy

io.skelp.verifier.type.CharacterVerifier.alpha=be a letter
io.skelp.verifier.type.CharacterVerifier.alphanumeric=be a letter or digit
io.skelp.verifier.type.CharacterVerifier.ascii=be ASCII
io.skelp.verifier.type.CharacterVerifier.asciiAlpha=be an ASCII letter
io.skelp.verifier.type.CharacterVerifier.asciiAlphaLowerCase=be an ASCII lower case letter
io.skelp.verifier.type.CharacterVerifier.asciiAlphaUpperCase=be an ASCII upper case letter
io.skelp.verifier.type.CharacterVerifier.asciiAlphanumeric=be an ASCII letter or digit
io.skelp.verifier.type.CharacterVerifier.asciiControl=be an ASCII control
io.skelp.verifier.type.CharacterVerifier.asciiNumeric=be an ASCII digit
io.skelp.verifier.type.CharacterVerifier.asciiPrintable=be ASCII printable
io.skelp.verifier.type.CharacterVerifier.lowerCase=be lower case
io.skelp.verifier.type.CharacterVerifier.numeric=be a digit
io.skelp.verifier.type.CharacterVerifier.upperCase=be upper case
io.skelp.verifier.type.CharacterVerifier.whitespace=be whitespace

io.skelp.verifier.type.ClassVerifier.annotated=be annotated
io.skelp.verifier.type.ClassVerifier.annotatedWith=be annotated with ''{0}''
io.skelp.verifier.type.ClassVerifier.annotatedWithAll=be annotated with all {0}
io.skelp.verifier.type.ClassVerifier.annotatedWithAny=be annotated with any {0}
io.skelp.verifier.type.ClassVerifier.annotation=be an annotation
io.skelp.verifier.type.ClassVerifier.anonymous=be anonymous
io.skelp.verifier.type.ClassVerifier.array=be an array
io.skelp.verifier.type.ClassVerifier.assignableFrom=be assignable from ''{0}''
io.skelp.verifier.type.ClassVerifier.assignableFromAll=be assignable from all {0}
io.skelp.verifier.type.ClassVerifier.assignableFromAny=be assignable from any {0}
io.skelp.verifier.type.ClassVerifier.enumeration=be an enum
io.skelp.verifier.type.ClassVerifier.interfacing=be an interfaces
io.skelp.verifier.type.ClassVerifier.nested=be nested
io.skelp.verifier.type.ClassVerifier.primitive=be a primitive
io.skelp.verifier.type.ClassVerifier.primitiveOrWrapper=be a primitive or primitive wrapper
io.skelp.verifier.type.ClassVerifier.primitiveWrapper=be a primitive wrapper

io.skelp.verifier.type.LocaleVerifier.available=be available
io.skelp.verifier.type.LocaleVerifier.country=be country ''{0}''
io.skelp.verifier.type.LocaleVerifier.defaulting=be default
io.skelp.verifier.type.LocaleVerifier.language=be language ''{0}''
io.skelp.verifier.type.LocaleVerifier.script=be script ''{0}''
io.skelp.verifier.type.LocaleVerifier.variant=be variant ''{0}''

io.skelp.verifier.type.MapVerifier.containAllKeys=contain all keys {0}
io.skelp.verifier.type.MapVerifier.containAnyKey=contain any key {0}
io.skelp.verifier.type.MapVerifier.containKey=contain key ''{0}''

io.skelp.verifier.type.StringVerifier.alpha=contain only letters
io.skelp.verifier.type.StringVerifier.alphaSpace=contain only letters or space
io.skelp.verifier.type.StringVerifier.alphanumeric=contain only letters or digits
io.skelp.verifier.type.StringVerifier.alphanumericSpace=contain only letters or digits or space
io.skelp.verifier.type.StringVerifier.asciiPrintable=contain only ASCII printable characters
io.skelp.verifier.type.StringVerifier.blank=be blank
io.skelp.verifier.type.StringVerifier.contain=contain ''{0}''
io.skelp.verifier.type.StringVerifier.containAll=contain all {0}
io.skelp.verifier.type.StringVerifier.containAllIgnoreCase=contain all {0} (ignore case)
io.skelp.verifier.type.StringVerifier.containAny=contain any {0}
io.skelp.verifier.type.StringVerifier.containAnyIgnoreCase=contain any {0} (ignore case)
io.skelp.verifier.type.StringVerifier.containIgnoreCase=contain ''{0}'' (ignore case)
io.skelp.verifier.type.StringVerifier.empty=be empty
io.skelp.verifier.type.StringVerifier.endWith=end with ''{0}''
io.skelp.verifier.type.StringVerifier.endWithAny=end with any {0}
io.skelp.verifier.type.StringVerifier.endWithAnyIgnoreCase=end with any {0} (ignore case)
io.skelp.verifier.type.StringVerifier.endWithIgnoreCase=end with ''{0}'' (ignore case)
io.skelp.verifier.type.StringVerifier.equalToAnyIgnoreCase=be equal to any {0} (ignore case)
io.skelp.verifier.type.StringVerifier.equalToIgnoreCase=be equal to ''{0}'' (ignore case)
io.skelp.verifier.type.StringVerifier.lowerCase=be all lower case
io.skelp.verifier.type.StringVerifier.match=match ''{0}''
io.skelp.verifier.type.StringVerifier.numeric=contain only digits
io.skelp.verifier.type.StringVerifier.numericSpace=contain only digits or space
io.skelp.verifier.type.StringVerifier.sizeOf=have a size of ''{0,number,integer}''
io.skelp.verifier.type.StringVerifier.startWith=start with ''{0}''
io.skelp.verifier.type.StringVerifier.startWithAny=start with any {0}
io.skelp.verifier.type.StringVerifier.startWithAnyIgnoreCase=start with any {0} (ignore case)
io.skelp.verifier.type.StringVerifier.startWithIgnoreCase=start with ''{0}'' (ignore case)
io.skelp.verifier.type.StringVerifier.upperCase=be all upper case

io.skelp.verifier.type.ThrowableVerifier.causedBy=have been caused by ''{0}''
io.skelp.verifier.type.ThrowableVerifier.checked=be checked
io.skelp.verifier.type.ThrowableVerifier.message=have message ''{0}''
io.skelp.verifier.type.ThrowableVerifier.unchecked=be unchecked
